Redis

- Remote Dictionary
- Open source in-memory data structure
- saves transient data
- can be used as a database or cache or message broker
- NoSQL key/value store
- supports multiple data structures
- built in replication
- Works on master slave concept

Redis Data types

- a big range
- Strings
- Lists
- Sets
- Sorted Sets
- Hashes
- Bitmaps
- HyperLogs
- Geospatial Indexes


Advantages of Redis

- Very flexible
- No schema and column names
- Very fast
- Caching and Disk persistence
- Combination of MongoDB and Memcached


Redis Security

- Should be used internally
- Should not be exposed to internet
- no data encryption
- only trusted clients can access redis


Redis Hashes

- map for string fields and values
- redis can store upto 4 billion field value pairs

- stores multiple values
- key is a string
- value is a map

Redis Lists

- list of strings sorted by insertion order
- elements can be inserted in top or bottom
- list has head and tail
- head is on the left side and tail on the right side


Redis Sets

- unordered collection of unique strings


Redis Sorted Sets

- unique and sorted
- every members have a score
- based on the score, the numbers are sorted


Redis Publish Subscribe

- implements messaging system with publisher and subscriber
- can subscribe to any number of channels


Features/Estimation for setting up Distributed Cache

- Data size
- QPS (Query per second)
- Latency
- LRU (eviction policy)
- 100% Availability
- Scalable

Cache Access Patterns

1. Write Through
   - write request goes through cache and then goes to DB
   - ack is sent only when the data is saved both in cache and the db
2. Write Around
	- Write request will go to DB around the cache. It will not store data in cache
	- Data is stored in cache only when there is a cache miss during read request. 
3. Write Back
	- The write will go to cache and ack is sent. It will not store data in cache
	- Later another service will store data asynchronously to DB
	
Cache Eviction Policy

- removing key value pair from cache which ar enot used

LRU (Least Recently Used)
- the key value pair which are not used.
- to implement LRU we need a hashtable and a bidirectional linked list
- bidirectional linked list will store the keys on the order 
- the items in the beginning of the list are least recently used
- If an item is accessed again and again, the old element is removed and added in the right side as a new entry
- Birectional linked list search and remove is O(1)


Fault Tolerance

1. Regular Interval Snapshot
   Saving snapshots of hashtable from RAM to DB
2. Log Reconstruction
   All the read and write operations with key values are logged in to the log file. Whole data can be reconstructed from the log file
   
Availability

- Replication
- Master Slave    


	
	
	
	